diff --git a/node_modules/@asymmetrik/node-fhir-server-core/dist/index.js b/node_modules/@asymmetrik/node-fhir-server-core/dist/index.js
index c7f6242..9213101 100644
--- a/node_modules/@asymmetrik/node-fhir-server-core/dist/index.js
+++ b/node_modules/@asymmetrik/node-fhir-server-core/dist/index.js
@@ -9,6 +9,9 @@ const winston = require('./server/winston.js');
 const Server = require('./server/server');
 
 const constants = require('./constants');
+
+const getSearchParameters = require('./server/utils/params.utils');
+
 /**
  * @name exports
  * @description Export the server and some convenience methods for building a FHIR server
@@ -21,6 +24,11 @@ module.exports = {
    */
   constants,
 
+    /**
+   * @description Get SearchParams
+   */
+  getSearchParameters,
+
   /**
    * @description Export Server Error class for people to throw from services
    * This will in turn generate an operation outcome
diff --git a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/parameters/index.js b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/parameters/index.js
index 7c579cb..53596b3 100644
--- a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/parameters/index.js
+++ b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/parameters/index.js
@@ -218,6 +218,8 @@ const researchsubject = require('./researchsubject.parameters.js');
 
 const resource = require('./resource.parameters.js');
 
+const result = require('./result.parameters.js');
+
 const riskassessment = require('./riskassessment.parameters.js');
 
 const riskevidencesynthesis = require('./riskevidencesynthesis.parameters.js');
@@ -373,6 +375,7 @@ module.exports = {
   researchstudy,
   researchsubject,
   resource,
+  result,
   riskassessment,
   riskevidencesynthesis,
   schedule,
diff --git a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/parameters/resource.parameters.js b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/parameters/resource.parameters.js
index 8886a1b..3cd881b 100644
--- a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/parameters/resource.parameters.js
+++ b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/parameters/resource.parameters.js
@@ -59,5 +59,5 @@ module.exports = {
     xpath: 'Resource.meta.tag',
     definition: 'http://hl7.org/fhir/SearchParameter/Resource-tag',
     description: 'Tags applied to this resource'
-  }
+  },
 };
\ No newline at end of file
diff --git a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/parameters/result.parameters.js b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/parameters/result.parameters.js
new file mode 100644
index 0000000..a79a5b8
--- /dev/null
+++ b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/parameters/result.parameters.js
@@ -0,0 +1,49 @@
+/**
+ * @name exports
+ * @static
+ * @summary Arguments for the reult query
+ */
+module.exports = {
+  _sort: {
+    type: 'string',
+    fhirtype: 'string',
+    xpath: '',
+    definition: '',
+    description: 'Order to sort results in (can repeat for inner sort orders)'
+  },
+  _count: {
+    type: 'number',
+    fhirtype: 'number',
+    xpath: '',
+    definition: '',
+    description: 'Number of results per page'
+  },
+  _elements: {
+    type: 'string',
+    fhirtype: 'string',
+    xpath: '',
+    definition: '',
+    description: 'Request that only a specific set of elements be returned for resources'
+  },
+  _include: {
+    type: 'string',
+    fhirtype: 'string',
+    xpath: '',
+    definition: '',
+    description: 'Other resources to include in the search results that search matches point to'
+  },
+  _revinclude: {
+    type: 'string',
+    fhirtype: 'string',
+    xpath: '',
+    definition: '',
+    description: 'Other resources to include in the search results when they refer to search matches'
+  },
+  _summary: {
+    type: 'string',
+    fhirtype: 'string',
+    xpath: '',
+    definition: '',
+    description: 'Just return the summary elements (for resources where this is defined)'
+  },
+};
\ No newline at end of file
diff --git a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/schemas/observation.js b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/schemas/observation.js
index c3701ca..d0211d6 100644
--- a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/schemas/observation.js
+++ b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/resources/4_0_0/schemas/observation.js
@@ -283,6 +283,7 @@ module.exports = class Observation {
         let Element = require('./element.js');
 
         this.__data._effectiveDateTime = new Element(value);
+        console.log(this.__data._effectiveDateTime)
       }
     });
     Object.defineProperty(this, 'effectiveDateTime', {
@@ -294,6 +295,7 @@ module.exports = class Observation {
         }
 
         this.__data.effectiveDateTime = value;
+        console.log(value)
       }
     });
     Object.defineProperty(this, 'effectivePeriod', {
diff --git a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/router.js b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/router.js
index c1711ab..641fbf9 100644
--- a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/router.js
+++ b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/router.js
@@ -43,6 +43,7 @@ const {
 const cors = require('cors');
 
 const uniques = list => list.filter((val, index, self) => val && self.indexOf(val) === index);
+var qs = require('qs');
 
 let deprecatedLogger = deprecate(container.get('default'), 'Using the logger this way is deprecated. Please see the documentation on ' + 'BREAKING CHANGES in version 2.0.0 for instructions on how to upgrade.');
 /**
@@ -115,7 +116,6 @@ function loadController(lowercaseKey, interaction, service) {
 function enableOperationRoutesForProfile(app, config, profile, key, parameters, corsDefaults) {
   // Error message we will use for invalid configurations
   let errorMessage = `Invalid operation configuration for ${key}. Please ` + 'see the Operations wiki for instructions on how to use operations. ' + 'https://github.com/Asymmetrik/node-fhir-server-core/wiki/Operations';
-
   for (let op of profile.operation) {
     let functionName = hyphenToCamelcase(op.name || '');
     let hasController = profile.serviceModule ? Object.keys(profile.serviceModule).includes(functionName) : false; // Check for required configurations, must have name, route, method, and
@@ -174,6 +174,7 @@ function enableMetadataRoute(app, config, corsDefaults) {
     security,
     statementGenerator
   } = config;
+
   const customBaseUrlProfiles = Object.keys(profiles).map(profileName => {
     const profile = profiles[profileName];
 
@@ -235,7 +236,6 @@ function enableResourceRoutes(app, config, corsDefaults) {
     // so load anything related to the key here and handle with one simple error
 
     let parameters;
-
     try {
       parameters = versions.reduce((all, version) => all.concat(getSearchParameters(lowercaseKey, version, overrideArguments)), []);
     } catch (err) {
diff --git a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/utils/params.utils.js b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/utils/params.utils.js
index ff294d0..71f2fd2 100644
--- a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/utils/params.utils.js
+++ b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/utils/params.utils.js
@@ -43,24 +43,23 @@ const getSearchParameters = (profile, version, customArgsModule, logger) => {
       key: lowercaseProfileName
     }), logger).searchParam; // We need to key these by name so we can remove duplicates on assign
 
-
     allArguments = paramsAsArray.reduce((all, arg) => {
       all[arg.name] = arg;
       return all;
     }, {});
   } else {
     allArguments = getParameters(version, lowercaseProfileName);
+
   } // Load our common arguments that apply to all resources
 
 
-  allArguments = Object.assign(allArguments, getParameters(version, 'resource')); // Everyone has a DomainResource and Resource parameter we want to include
+  allArguments = Object.assign(allArguments, getParameters(version, 'resource'), getParameters(version, 'result')); // Everyone has a DomainResource and Resource parameter we want to include
   // except DSTU2(1_0_2), so do not attempt to assign that in DSTU2
 
   if (version !== '1_0_2') {
     allArguments = Object.assign(allArguments, getParameters(version, 'domainresource'));
   } // Convert these into an array
 
-
   return Object.getOwnPropertyNames(allArguments).map(name => {
     return Object.assign({
       versions: version,
diff --git a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/utils/params.utils.test.js b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/utils/params.utils.test.js
index db87e28..4baf8fb 100644
--- a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/utils/params.utils.test.js
+++ b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/utils/params.utils.test.js
@@ -38,6 +38,7 @@ describe('Param Utils Tests', () => {
       expect(r4Params).toHaveLength(32);
       expect(Array.isArray(r401Params)).toBeTruthy();
       expect(r401Params).toHaveLength(32);
+      console.log(r4Params)
     });
     test('should throw an error if given an invalid parameter name', () => {
       expect(() => {
diff --git a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/utils/sanitize.utils.js b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/utils/sanitize.utils.js
index 3e6f85c..5abb332 100644
--- a/node_modules/@asymmetrik/node-fhir-server-core/dist/server/utils/sanitize.utils.js
+++ b/node_modules/@asymmetrik/node-fhir-server-core/dist/server/utils/sanitize.utils.js
@@ -4,7 +4,11 @@ const errors = require('./error.utils');
 
 const validator = require('validator');
 
+const qs = require('qs');
+
 const xss = require('xss');
+const { default: isURL } = require('validator/lib/isURL');
+const e = require('express');
 
 let parseValue = function (type, value) {
   let result;
@@ -26,11 +30,14 @@ let parseValue = function (type, value) {
     case 'reference':
     case 'uri':
     case 'token':
+    case 'quantity':
+    case 'composite':
       // strip any html tags from the query
       // xss helps prevent html from slipping in
       // strip a certain range of unicode characters
       // replace any non word characters
       result = validator.stripLow(xss(sanitize(value)));
+
       break;
 
     case 'json_string':
@@ -63,6 +70,8 @@ let validateType = function (type, value) {
     case 'uri':
     case 'token':
     case 'date':
+    case 'quantity':
+    case 'composite':
       result = typeof value === 'string';
       break;
 
@@ -83,7 +92,16 @@ let parseParams = req => {
   let isSearch = req.url && req.url.endsWith('_search');
 
   if (req.query && req.method === 'GET' && Object.keys(req.query).length) {
-    Object.assign(params, req.query);
+    const decodedQuery = (() => {
+      try {
+        return qs.parse(req._parsedUrl.query, { decoder: (c) => decodeURIComponent(c)  });
+      } catch (err) {
+        return qs.parse(req._parsedUrl.query); // デコードに失敗した場合は、クエリ文字列をデコードせずにパースする
+      }
+    })();
+    Object.assign(params, decodedQuery );
+    // const decodedQuery = qs.parse(req._parsedUrl.query, { decoder: (c) => c });
+    // Object.assign(params, req.query);
   }
 
   if (req.body && ['PUT', 'POST'].includes(req.method) && Object.keys(req.body).length && isSearch) {
@@ -93,7 +111,7 @@ let parseParams = req => {
   if (req.params && Object.keys(req.params).length) {
     Object.assign(params, req.params);
   }
-
+  // console.log(params)
   return params;
 };
 
@@ -108,6 +126,45 @@ let findMatchWithName = (name = '', params = {}) => {
     value: params[match]
   };
 };
+
+/**
+ * @function modifiersChecker 
+ * @summary Checks for modifiers and returns parameters without modifiers as object type 
+ * example  target = gender:not -> return ['gender'], target = gender -> return['gender']
+ * @param {object} target - searchParams
+ */
+const modifiersChecker = function (target) {
+  const reg = new RegExp(/([^"]*)(:)([^"]*)/)
+  const keyObj = Object.keys(target);
+  const valueObj = Object.values(target)
+  let newArr = {}
+
+  for(let i=0; i<keyObj.length; i++){
+    if(reg.test(keyObj[i]) == true){
+      newArr[keyObj[i].split(':')[0]] = valueObj[i]
+    }else{
+      newArr[keyObj[i]] = valueObj[i]
+    }
+  }
+  return newArr
+}
+
+/**
+ * @function searchParameterChecker
+ * @summary Check if the search parameters are equivalent to the values specified by hl7
+ * example  target = gendernot -> return ['gender'], target = gender -> return['gender']
+ * @param {object} target - searchParams
+ * @param {array} paramsArr - Value determined by hl7
+ */
+const searchParameterChecker = function(target, paramsArr){
+  for(let i = 0; i < Object.keys(target).length; i++){
+    if(paramsArr.includes(Object.keys(target)[i]) === false){
+      return Object.keys(target)[i];
+    }
+  }
+}
+
+
 /**
  * @function sanitizeMiddleware
  * @summary Sanitize the arguments by removing extra arguments, escaping some, and
@@ -119,12 +176,13 @@ let findMatchWithName = (name = '', params = {}) => {
  * @param {boolean} required - Should we throw if this argument is present and invalid, default is false
  */
 
-
 let sanitizeMiddleware = function (config) {
   return function (req, res, next) {
     let currentArgs = parseParams(req);
     let cleanArgs = {}; // filter only ones with version or no version
 
+    let searchParametersArr = [];
+
     let version_specific_params = config.filter(param => {
       return !param.versions || param.versions === req.params.base_version;
     }); // Check each argument in the config
@@ -136,12 +194,14 @@ let sanitizeMiddleware = function (config) {
         value
       } = findMatchWithName(conf.name, currentArgs); // If the argument is required but not present
 
+      // console.log(config)
+      searchParametersArr.push(conf.name)
+
       if (!value && conf.required) {
         return next(errors.invalidParameter(conf.name + ' is required', req.params.base_version));
       } // Try to cast the type to the correct type, do this first so that if something
       // returns as NaN we can bail on it
 
-
       try {
         if (value) {
           cleanArgs[field] = parseValue(conf.type, value);
@@ -150,14 +210,24 @@ let sanitizeMiddleware = function (config) {
         return next(errors.invalidParameter(conf.name + ' is invalid', req.params.base_version));
       } // If we have the arg and the type is wrong, throw invalid arg
 
-
       if (cleanArgs[field] !== undefined && !validateType(conf.type, cleanArgs[field])) {
         return next(errors.invalidParameter('Invalid parameter: ' + conf.name, req.params.base_version));
       }
     } // Save the cleaned arguments on the request for later use, we must only use these later on
 
+    // console.log("n-f-c/dist/server-utils/sanitize.utill/sanitizeMiddleware/cleanArgs" + JSON.stringify(cleanArgs))
+    console.log("n-f-c/dist/server-utils/sanitize.utill/sanitizeMiddleware/currentArgs" + JSON.stringify(currentArgs))
+    // console.log(searchParametersArr)
+    if(searchParameterChecker(modifiersChecker(currentArgs), searchParametersArr)){
+      return next(errors.invalidParameter(
+        'Invalid parameter: ' + JSON.stringify(currentArgs) +  '  Valid search parameters for this search are : ' +  searchParametersArr 
+      ));
+    }
+
+
 
-    req.sanitized_args = cleanArgs;
+    // req.sanitized_args = cleanArgs;
+    req.sanitized_args = currentArgs;
     next();
   };
 };
